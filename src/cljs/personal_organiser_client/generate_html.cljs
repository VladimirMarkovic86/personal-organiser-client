(ns personal-organiser-client.generate-html)

(defn crt
  "Create clojure map that represents HTML element
   
   el String that represents HTML element
   cont Content of HTML that can be string, new crt fn call or vector of crt fn calls
   attrs Attrs is a map of attributes for particular HTML element
    {:style {:width \"50px\"}
     :id \"id\"}
   events Events is a map of events on particular HTML element
    {:onclick {:evt-fn <fn-name>
               :evt-p <fn-param-name>}}
   "
  [el
   & [cont
      attrs
      events]]
  {:el el
   :events events
   :attrs attrs
   :cont cont})

(defn- generate-html
  "Generates HTML element out of clojure map created by crt fn"
  [data]
  (if (map? data)
    (let [el (:el data)
          cont (:cont data)
          new-element (.createElement js/document el)
          attrs (:attrs data)
          events (:events data)]
     (doseq [[attr-name
              attr-value] attrs]
      (let [attr-cont (atom "")]
       (if (and (= attr-name
                   :style)
                (map? attr-value))
        (doseq [[prop-name
                 prop-value] attr-value]
         (swap! attr-cont str (name prop-name)
                              ": "
                              prop-value
                              "; "))
        (swap! attr-cont str attr-value))
       (.setAttribute new-element (name attr-name)
                                  @attr-cont))
      )
     (doseq [[evt-name
              {evt-fn :evt-fn
               evt-p :evt-p}] events]
      (aset new-element (name evt-name)
                        #(evt-fn evt-p
                                 new-element)
       ))
     (if (or (string? cont)
             (number? cont))
      (aset new-element "innerHTML" cont)
      (if (vector? cont)
       (doseq [cont-element cont]
        (.appendChild new-element (generate-html cont-element))
        )
       (if (map? cont)
        (.appendChild new-element (generate-html cont))
        ""))
      )
     new-element)
   (if (vector? data)
    (let [generated-htmls (atom [])]
     (doseq [data-element data]
      (swap! generated-htmls conj (generate-html data-element))
      )
     @generated-htmls)
    nil))
  )

(defn anmtn
  "Generate map that represents animation in css style
   
   animation-name Is animation name
   from-props Is map of properties at the start of animation
    {:width \"50px\"}
   to-props Is map of properties at the end of animation
    {:width \"100px\"}"
  [animation-name
   from-props
   to-props]
  {:anim (str "@keyframes "
              animation-name)
   :from from-props
   :to to-props})

(defn slctr
  "Generate map that represents selector and it's properties
   
   selector Is a css selector
   props-map Is map of properties applied to element selected by selector"
  [selector
   props-map]
  {:sel selector
   :props props-map})

(defn stl
  "Generate map that represents style HTML element
  
   id Is identification of style HTML element
   cont Is a content of style HTML element that can be map generated by anmtn or slctr fns
    or vector of these maps"
  [id
   & cont]
  {:attrs {:id id
           :type "text/css"}
   :cont (vec cont)})

(defn- form-style-content
  "Generate string that represents selector or animation of style HTML element"
  [data]
  (let [sel (:sel data)
        props (:props data)
        anim (:anim data)
        from-props (:from data)
        to-props (:to data)
        content (atom "")]
   (if sel
    (do
     (swap! content str sel
                        " { ")
     (doseq [[prop-name
              prop-value] props]
      (swap! content str (name prop-name)
                         ": "
                         prop-value
                         "; ")
      ))
    (do
     (swap! content str anim
                        " { "
                        "from { ")
     (doseq [[prop-name
              prop-value] from-props]
      (swap! content str (name prop-name)
                         ": "
                         prop-value
                         "; "))
     (swap! content str "} ")
     (swap! content str "to { ")
     (doseq [[prop-name
              prop-value] to-props]
      (swap! content str (name prop-name)
                         ": "
                         prop-value
                         "; "))
     (swap! content str "} "))
    )
   (swap! content str "} ")
   @content))

(defn- generate-style
  "Generates style HTML element from clojure map generated by stl fn"
  [data]
  (if (map? data)
   (let [new-element (.createElement js/document "style")
         attrs (:attrs data)
         cont (:cont data)]
    (if (string? cont)
     (aset new-element "innerHTML" cont)
     (if (vector? cont)
      (doseq [cont-element cont]
       (aset new-element "innerHTML" (str (aget new-element "innerHTML")
                                          " "
                                          (form-style-content cont-element))
        ))
      (if (map? cont)
       (aset new-element "innerHTML" (form-style-content cont))
       (aset new-element "innerHTML" (form-style-content data))
       ))
     )
    (doseq [[attr-name
             attr-value] attrs]
     (.setAttribute new-element (name attr-name)
                                attr-value))
    new-element)
   nil))

(defn gen
  "Generate HTML element from map generated by crt or stl fns"
  [data
  & [tag-type]]
  (if (= tag-type
         "style")
   (generate-style data)
   (generate-html data))
  )

